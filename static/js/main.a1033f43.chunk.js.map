{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textbox.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","className","style","color","mode","Navbar","to","title","type","id","about","class","onClick","toggleMode","for","prototype","PropTypes","string","Textbox","useState","text","setText","heading","value","onChange","event","target","rows","backgroundColor","navigator","clipboard","writeText","newText","toUpperCase","toLowerCase","split","join","filter","element","length","App","setMode","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1033f43.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  return (\r\n    <div\r\n      className=\"container my-4 \"\r\n      style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n    >\r\n      <h2>About Us</h2>\r\n      \r\n\r\n      <p className=\"my-4 \">\r\n        TheText is a basic utility web app that can help you to manipulate text\r\n        or we can say string\r\n      </p>\r\n      <p> you can perform the different tasks with this.</p>\r\n      <p>this web app is based on React js </p>\r\n      <p>hope you will like it...</p>\r\n      <p>thankyou</p>\r\n      </div>\r\n    \r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n\r\n            {/* Dark mode switch  */}\r\n            <div\r\n              class={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                onClick={props.toggleMode}\r\n                class=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label class=\"form-check-label\" for=\"flexSwitchCheckDefault\">\r\n                Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.prototype = {\r\n  title: PropTypes.string,\r\n  about: PropTypes.string,\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textbox(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  // to convert uppercase \r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n\r\n  // to clear textbox \r\n  const handleClClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n\r\n  // to copy textbox \r\nconst handleCopy = ()=>{\r\n  navigator.clipboard.writeText(text)\r\n\r\n}\r\n\r\n  //  to handle lowercase \r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  \r\n  // remove extra space \r\n  const handleSpace = () => {\r\n    let newText=text.split(/[  ]+/)\r\n    setText(newText.join(\" \"));\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div\r\n          className=\"mb-3 \"\r\n          className=\"container\"\r\n          style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n        >\r\n          <h2>{props.heading}</h2>\r\n          <textarea\r\n            className=\"form-control \"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"box\"\r\n            rows=\"10\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n          <button className=\"btn btn-secondary\" onClick={handleClClick}>\r\n            Clear\r\n          </button> \r\n          \r\n          <button className=\"btn btn-secondary mx-2\" onClick={handleCopy}>\r\n            Copy\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn btn-primary my-2 \"\r\n            onClick={handleUpClick}\r\n          >\r\n            Convert Upper Case\r\n          </button>\r\n\r\n          <button className=\"btn btn-primary my-2 mx-2 \" onClick={handleLoClick}>\r\n            Convert Lower Case\r\n          </button> \r\n          \r\n          <button className=\"btn btn-primary my-2  \" onClick={handleSpace}>\r\n            Remove Extra Space\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"container my-4\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h5>Word Count</h5>\r\n        <p>\r\n          {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Word and {text.length} Character\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textbox from \"./components/Textbox\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#404040\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n    }\n  };\n\n  return (\n    <Router>\n\n    <div>\n      <Navbar\n        title=\"TheText\"\n        about=\"About us\"\n        mode={mode}\n        toggleMode={toggleMode}\n        />\n\n\n{/* react router  */}\n{/* use exact for strictly match  */}\n      <Switch>\n        <Route exact path=\"/about\">\n          <About mode={mode}  />\n        </Route>\n        <Route exact path=\"/\">\n          <Textbox heading=\"Text Box\" mode={mode} />\n        </Route>\n      </Switch>\n\n    </div>\n        </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}